[parse]

# JS namespace. By default it is the same as config file namespace.
# This namespace is used then the script autogenerates JS code. eg: with the constant
js_namespace = parse

# prefix that will be removed from the ObjC classes in order to generate the JS classes
# ex: If the class name is CCNode, then on JavaScript it will be Node
obj_class_prefix_to_remove = PF

# Classes to generate. Use '*' to generate all the parsed classes.
# Subclasses will be parsed as well.
# ex: If CCSprite is parsed, then CCNode and NSObject will be parsed as well
# It supports regular expressions to match class names.
# eg: all cocos2d actions ending in 'By': CC(.*)By
classes_to_parse = PF(.*)

# Classes to ignore.
# It is a good idea to add classes that you don't want to have a proxy object. Usually internal classes,
# or classes that are already native on JavaScript should be added here.
# It supports regular expressions to match class names.
# eg: all NS classes: NS(.*)
#
# cocos2d comments:
# CCMenu, CCLayer* and CCDirector(*) are ignored because they are parsed on the iOS / Mac variants
# CCCallFunc*: Not needed... only CallBlockN is used
classes_to_ignore = PFLogInView, PFLogInViewController, PFProductTableViewController, PFQueryTableViewController, PFSignUpView, PFSignUpViewController, PFTableViewCell, NS(.*)

# Class properties
# Options
#  manual               Means that the class is manually bound. No binding info will generated, but it can be used.
#  name:"newname"       New name of the class
#  ignore               The class will not be bound, and no references to it will be created
#  reserved_slots       How many slots it should be reserved for this class. Needed to 'root' jsvals
class_properties =


# Whether or not to generate constructors from base classes for the current class.
# In JavaScript, the "constructors" or "static methods" are not "inherited".
# It is recommended to set it to "auto".
# Options:
#    False: Don't inherited
#    True: Inherit all class methods from all ancestors
#    Auto: Inherit only if it has no class constructors. Stop when the fist class constructor is added.
inherit_class_methods = Auto

# Files that are going to be imported by the auto-generated files.
# Useful to declare subclasses of an already bound project
# eg: manual bindings for NSObject
import_files =



# The prefix will be removed from function name.
# eg: if the C function is "cpBodyAddShape", then the JS name will be "bodyWithAddShape"
## For cocos2d add "cc"
function_prefix_to_remove =

# Free functions to be parsed
functions_to_parse = 

# Free functions not to parse
## ccc3, ccc4, ccc4f are created manually in JS since it is faster at runtime.
functions_to_ignore = 

# Free functions properties
# Options
#  manual               Means that the class is manually bound. No binding info will generated, but it can be used.
#  name:"newname"       New name of the class
## _native_p is used for testing purposes.
function_properties =

# Rules used for methods:
# options:
#   name:"js_name"         Rename methods.
#   ignore                 This method will be ignored.
#   callback               This method is a callback. It will be invoked from Objective-C
#   no_swizzle             It means that the callback function is an optional protocol and should not be "swizzled" because there is no implementation for it.
#   variadic_2_array       It means that all arguments are variadic, and an Array will be created with them
#   merge:name | name...   List of methods names that should be merged with this method as well.
#   manual                 It means that its implementation won't be auto-generated. It is implemented manually
#
#  Regular expressions are supported in the Class names, but not in the Method names
#
method_properties =  

#
# JS new methods
# Add here methods that are not defined in the header class, but you want to add them in JS
# Useful when you need to split a native method in 2 or more JS methods
#
# eg: Adds 2 new methods called "getFlags" and "setTileAtOrigin".
#     The 1st one receives one argument, while the 2nd one receives 2 arguments.
# CCTMXLayer = getFlagsAt:1, setTileAtOrigin:2
#
js_new_methods =

#
# Struct properties
# options:
#   opaque              The structure will be treated as 'opaque' and can't not be inspected from JS.
#                       Opaque structures are much faster to generate than 'manual' or 'automatic' structures
#   manual:[func]       Manual conversion is provided for this structures. jsval_to_structname() and structname_to_jsval shall exists in your project
#                       If "func" is passed, it will call that conversion function
struct_properties =

# BridgeSupport files
# add as many as you need. Usually you will only one.
bridge_support_file = Parse.bridgesupport

# File that contains information that complements BridgeSupport (not present on BridgeSupport file)
complement_file = Parse-complement.txt


